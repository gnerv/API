Redis 


性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。
丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。
原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。
丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。

Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。



安装
Window 下安装
下载地址：https://github.com/dmajkic/redis/downloads。

下载到的Redis支持32bit和64bit。根据自己实际情况选择，将64bit的内容cp到自定义盘符安装目录取名redis。 如 C:\reids

打开一个cmd窗口 使用cd命令切换目录到 C:\redis 运行 redis-server.exe redis.conf 。（如果下载的是Redis-x64-3.2.100版本，是运行 redis-server.exe redis.windows.conf）

如果想方便的话，可以把redis的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个redis.conf可以省略，如果省略，会启用默认的。输入之后，会显示如下界面：

redis安装1

这时候另启一个cmd窗口，原来的不要关闭，不然就无法访问服务端了。

切换到redis目录下运行 redis-cli.exe -h 127.0.0.1 -p 6379 。

设置键值对 set myKey abc

取出键值对 get myKey





Linux 下安装
下载地址：http://redis.io/download，下载最新文档版本。

本教程使用的最新文档版本为 2.8.17，下载并安装：

$ wget http://download.redis.io/releases/redis-2.8.17.tar.gz
$ tar xzf redis-2.8.17.tar.gz
$ cd redis-2.8.17
$ make
make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli

下面启动redis服务.

$ ./redis-server
注意这种方式启动redis 使用的是默认配置。也可以通过启动参数告诉redis使用指定配置文件使用下面命令启动。

$ ./redis-server redis.conf
redis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件。

启动redis服务进程后，就可以使用测试客户端程序redis-cli和redis服务交互了。 比如：

$ ./redis-cli
redis> set foo bar
OK
redis> get foo
"bar"



Ubuntu 下安装
在 Ubuntu 系统安装 Redi 可以使用以下命令:

$sudo apt-get update
$sudo apt-get install redis-server
启动 Redis
$redis-server
查看 redis 是否启动？
$redis-cli
以上命令将打开以下终端：

redis 127.0.0.1:6379>
127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。

redis 127.0.0.1:6379> ping
PONG
以上说明我们已经成功安装了redis。










Java 使用 Redis
由 youj 创建，小路依依 最后一次修改 2017-12-13 17:47:18
Java 使用 Redis
安装
开始在 Java 中使用 Redis 前， 我们需要确保已经安装了 redis 服务及 Java redis 驱动，且你的机器上能正常使用 Java。 Java的安装配置可以参考我们的 Java开发环境配置 接下来让我们安装 Java redis 驱动：

首先你需要下载驱动包，下载 jedis.jar，确保下载最新驱动包。
在你的classpath中包含该驱动包。
连接到 redis 服务
import redis.clients.jedis.Jedis;
public class RedisJava {
   public static void main(String[] args) {
      //连接本地的 Redis 服务
      Jedis jedis = new Jedis("localhost");
      System.out.println("连接成功");
      //查看服务是否运行
      System.out.println("服务器正在运行: "+jedis.ping());
 }
}
编译以上 Java 程序，确保驱动包的路径是正确的。

  连接成功
  服务正在运行：PONG
Redis Java String(字符串) 实例
import redis.clients.jedis.Jedis;

public class RedisStringJava {
   public static void main(String[] args) {
      //连接本地的 Redis 服务
      Jedis jedis = new Jedis("localhost");
      System.out.println("连接成功");
      //设置 redis 字符串数据
      jedis.set("w3ckey", "www.w3cschool.cn");
     // 获取存储的数据并输出
     System.out.println("redis 存储的字符串为: "+ jedis.get("w3ckey"));
 }
}
编译以上程序。

 连接成功
 redis 存储的字符串为：www.w3cschool.cn 
Redis Java List(列表) 实例
import java.util.List
import redis.clients.jedis.Jedis; 

public class RedisListJava {
   public static void main(String[] args) {
      //连接本地的 Redis 服务
      Jedis jedis = new Jedis("localhost");
      System.out.println("连接成功");
      //存储数据到列表中
      jedis.lpush("tutorial-list", "Redis");
      jedis.lpush("tutorial-list", "Mongodb");
      jedis.lpush("tutorial-list", "Mysql");
     // 获取存储的数据并输出
     List<String> list = jedis.lrange("tutorial-list", 0 ,2);
     for(int i=0; i<list.size(); i++) {        
       System.out.println("列表项为: "+list.get(i));      
     }  
   } 
} 
编译以上程序。

 连接成功
 列表项为: Redis
 列表项为: Mongodb
 列表项为: Mysql
Redis Java Keys 实例
import java.util.Iterator;
import java.util.Set;
import redis.clients.jedis.Jedis; 

public class RedisKeyJava {
   public static void main(String[] args) {
      //连接本地的 Redis 服务
      Jedis jedis = new Jedis("localhost");
      System.out.println("连接成功");
      
     // 获取数据并输出
     Set<String> keys= jedis.keys("*");
     Iterator<String> it=keys.iterator();
     while(it.hasNext) {   
       String key=it.next();     
       System.out.println("key");     
     }    
   } 
} 
编译以上程序。

 连接成功
 w3ckey
 tutorial-list 









































































































































































