Hadoop 环境设置
由 johnnyhung 创建，小路依依 最后一次修改 2017-01-07 17:30:58
Hadoop由GNU / Linux平台及其版本支持。因此，我们必须安装一个Linux操作系统来设置Hadoop环境。如果您有除Linux以外的操作系统，您可以在其中安装Virtualbox软件，并在Virtualbox内部安装Linux。

安装前设置
在将Hadoop安装到Linux环境之前，我们需要使用ssh（Secure Shell）来设置Linux。按照以下步骤设置Linux环境。

创建用户
在开始时，建议为Hadoop创建一个单独的用户，以便将Hadoop文件系统与Unix文件系统隔离。按照以下步骤创建用户：

使用命令“su”打开根。
使用命令“useradd username”从root帐户创建用户。
现在您可以使用命令“su username”打开现有的用户帐户。
打开Linux终端并键入以下命令以创建用户。

$ su 
   password: 
# useradd hadoop 
# passwd hadoop 
   New passwd: 
   Retype new passwd 
SSH设置和密钥生成
需要SSH设置在集群上执行不同的操作，如启动，停止，分布式守护程序shell操作。要对Hadoop的不同用户进行身份验证，需要为Hadoop用户提供公钥/私钥对，并与不同的用户共享。

以下命令用于使用SSH生成键值对。将公共密钥表单id_rsa.pub复制到authorized_keys，并分别向拥有者授予authorized_keys文件的读取和写入权限。

$ ssh-keygen -t rsa 
$ cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys 
$ chmod 0600 ~/.ssh/authorized_keys 
安装Java
Java是Hadoop的主要先决条件。首先，您应该使用命令“java -version”验证系统中是否存在java。 java版本命令的语法如下。

$ java -version 
如果一切正常，它会给你以下输出。

java version "1.7.0_71" 
Java(TM) SE Runtime Environment (build 1.7.0_71-b13) 
Java HotSpot(TM) Client VM (build 25.0-b02, mixed mode)  
如果系统中没有安装java，请按照以下步骤安装java。

第1步
通过访问以下链接http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads1880260.html下载java（JDK <latest version> - X64.tar.gz）。

然后jdk-7u71-linux-x64.tar.gz将下载到您的系统。

第2步
通常你会在下载文件夹中找到下载的java文件。使用以下命令验证它并解压缩jdk-7u71-linux-x64.gz文件。

$ cd Downloads/ 
$ ls 
jdk-7u71-linux-x64.gz 
$ tar zxf jdk-7u71-linux-x64.gz 
$ ls 
jdk1.7.0_71   jdk-7u71-linux-x64.gz 
第3步
要使java可用于所有用户，您必须将其移动到位置“/ usr / local /”。打开root，然后键入以下命令。

$ su 
password: 
# mv jdk1.7.0_71 /usr/local/ 
# exit 
第4步
要设置PATH和JAVA_HOME变量，请将以下命令添加到〜/ .bashrc文件。

export JAVA_HOME=/usr/local/jdk1.7.0_71 
export PATH=$PATH:$JAVA_HOME/bin 
现在将所有更改应用到当前运行的系统。

$ source ~/.bashrc
第5步
现在将所有更改应用到当前运行的系统。

# alternatives --install /usr/bin/java java usr/local/java/bin/java 2

# alternatives --install /usr/bin/javac javac usr/local/java/bin/javac 2

# alternatives --install /usr/bin/jar jar usr/local/java/bin/jar 2

# alternatives --set java usr/local/java/bin/java

# alternatives --set javac usr/local/java/bin/javac

# alternatives --set jar usr/local/java/bin/jar
现在如上所述从终端验证java -version命令。

下载Hadoop
 使用以下命令从Apache Software Foundation下载并提取Hadoop 2.4.1。

$ su 
password: 
# cd /usr/local 
# wget http://apache.claz.org/hadoop/common/hadoop-2.4.1/ 
hadoop-2.4.1.tar.gz 
# tar xzf hadoop-2.4.1.tar.gz 
# mv hadoop-2.4.1/* to hadoop/ 
# exit 
Hadoop操作模式
一旦下载了Hadoop，您就可以使用以下三种支持模式之一来操作Hadoop集群：

本地/独立模式 ：在系统中下载Hadoop之后，默认情况下，它以独立模式配置，并且可以作为单个Java进程运行。

伪分布式模式 ：它是单机上的分布式仿真。每个Hadoop守护进程（如hdfs，yarn，MapReduce等）都将作为单独的java进程运行。此模式对开发有用。

完全分布式的模式 ：此模式是完全分布式的，至少有两台或多台机器作为集群。我们将在接下来的章节中详细讨论这种模式。

在独立模式下安装Hadoop
这里我们将讨论Hadoop 2.4.1在独立模式下的安装。

没有运行的守护程序，并且一切都在单个JVM中运行。独立模式适合在开发期间运行MapReduce程序，因为它很容易测试和调试。

设置Hadoop
您可以通过将以下命令附加到〜/.bashrc文件来设置Hadoop环境变量。

export HADOOP_HOME=/usr/local/hadoop 
在继续进行之前，您需要确保Hadoop正常工作。只需发出以下命令：

$ hadoop version 
如果您的设置一切正常，那么你应该看到以下结果：

Hadoop 2.4.1 
Subversion https://svn.apache.org/repos/asf/hadoop/common -r 1529768 
Compiled by hortonmu on 2013-10-07T06:28Z 
Compiled with protoc 2.5.0
From source with checksum 79e53ce7994d1628b240f09af91e1af4 
这意味着你的Hadoop的独立模式设置工作正常。默认情况下，Hadoop配置为在单台计算机上以非分布式方式运行。

例子
让我们检查一个简单的Hadoop示例。 Hadoop安装提供了以下示例MapReduce jar文件，它提供了MapReduce的基本功能，可用于计算，如Pi值，文件列表中的字数等。

$HADOOP_HOME/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.2.0.jar 
让我们有一个输入目录，我们将推送几个文件，我们的要求是计数这些文件中的字的总数。要计算总字数，我们不需要写我们的MapReduce，只要.jar文件包含字计数的实现。您可以尝试使用相同的.jar文件的其他示例;只需发出以下命令来检查hadoop-mapreduce-examples-2.2.0.jar文件支持的MapReduce功能程序。

$ hadoop jar $HADOOP_HOME/share/hadoop/mapreduce/hadoop-mapreduceexamples-2.2.0.jar 
步骤1
在输入目录中创建临时内容文件。您可以在要工作的任何位置创建此输入目录。

$ mkdir input 
$ cp $HADOOP_HOME/*.txt input 
$ ls -l input 
它将在您的输入目录中提供以下文件：

total 24 
-rw-r--r-- 1 root root 15164 Feb 21 10:14 LICENSE.txt 
-rw-r--r-- 1 root root   101 Feb 21 10:14 NOTICE.txt
-rw-r--r-- 1 root root  1366 Feb 21 10:14 README.txt 
这些文件已从Hadoop安装主目录复制。对于您的实验，您可以有不同的和大的文件集。

第2步
让我们开始Hadoop进程来计算输入目录中所有可用文件中的总字数，如下所示：

$ hadoop jar $HADOOP_HOME/share/hadoop/mapreduce/hadoop-mapreduceexamples-2.2.0.jar  wordcount input output 
第3步
第2步将执行所需的处理并将输出保存在output / part-r00000文件中，您可以使用以下命令检查：

$cat output/* 
它将列出所有字以及它们在输入目录中可用的所有文件中的总计数。

"AS      4 
"Contribution" 1 
"Contributor" 1 
"Derivative 1
"Legal 1
"License"      1
"License");     1 
"Licensor"      1
"NOTICE”        1 
"Not      1 
"Object"        1 
"Source”        1 
"Work”    1 
"You"     1 
"Your")   1 
"[]"      1 
"control"       1 
"printed        1 
"submitted"     1 
(50%)     1 
(BIS),    1 
(C)       1 
(Don't)   1 
(ECCN)    1 
(INCLUDING      2 
(INCLUDING,     2 
.............
在伪分布式模式下安装Hadoop
按照下面给出的步骤在伪分布式模式下安装Hadoop 2.4.1。

第1步：设置Hadoop
您可以通过将以下命令附加到〜/.bashrc文件来设置Hadoop环境变量。

export HADOOP_HOME=/usr/local/hadoop 
export HADOOP_MAPRED_HOME=$HADOOP_HOME 
export HADOOP_COMMON_HOME=$HADOOP_HOME 
export HADOOP_HDFS_HOME=$HADOOP_HOME 
export YARN_HOME=$HADOOP_HOME 
export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native 
export PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin 
export HADOOP_INSTALL=$HADOOP_HOME 
现在将所有更改应用到当前运行的系统。

$ source ~/.bashrc 
第2步：Hadoop配置
您可以在位置“$ HADOOP_HOME/etc/hadoop”中找到所有Hadoop配置文件。需要根据您的Hadoop基础结构对这些配置文件进行更改。

$ cd $HADOOP_HOME/etc/hadoop
为了在java中开发Hadoop程序，您必须通过用系统中java的位置替换JAVA_HOME值来重置hadoop-env.sh文件中的java环境变量。

export JAVA_HOME=/usr/local/jdk1.7.0_71
以下是您必须编辑以配置Hadoop的文件列表。

core-site.xml

core-site.xml文件包含诸如用于Hadoop实例的端口号，为文件系统分配的内存，用于存储数据的内存限制以及读/写缓冲区大小的信息。

打开core-site.xml并在<configuration>，</ configuration>标签之间添加以下属性。

<configuration>

   <property>
      <name>fs.default.name </name>
      <value> hdfs://localhost:9000 </value> 
   </property>
 
</configuration>
hdfs-site.xml

hdfs-site.xml文件包含本地文件系统的复制数据值，namenode路径和datanode路径等信息。这意味着您要存储Hadoop基础架构的位置。

让我们假设以下数据。

dfs.replication (data replication value) = 1 
(In the below given path /hadoop/ is the user name. 
hadoopinfra/hdfs/namenode is the directory created by hdfs file system.) 
namenode path = //home/hadoop/hadoopinfra/hdfs/namenode 
(hadoopinfra/hdfs/datanode is the directory created by hdfs file system.) 
datanode path = //home/hadoop/hadoopinfra/hdfs/datanode 
打开此文件，并在此文件中的<configuration> </ configuration>标记之间添加以下属性。

<configuration>

   <property>
      <name>dfs.replication</name>
      <value>1</value>
   </property>
    
   <property>
      <name>dfs.name.dir</name>
      <value>file:///home/hadoop/hadoopinfra/hdfs/namenode </value>
   </property>
    
   <property>
      <name>dfs.data.dir</name> 
      <value>file:///home/hadoop/hadoopinfra/hdfs/datanode </value> 
   </property>
       
</configuration>
注意：在上述文件中，所有属性值都是用户定义的，您可以根据Hadoop基础结构进行更改。

yarn-site.xml

此文件用于将Yarn为Hadoop配置为Hadoop。打开yarn-site.xml文件，并在此文件中的<configuration>，</ configuration>标记之间添加以下属性。

<configuration>
 
   <property>
      <name>yarn.nodemanager.aux-services</name>
      <value>mapreduce_shuffle</value> 
   </property>
  
</configuration>
mapred-site.xml

此文件用于指定我们使用的MapReduce框架。默认情况下，Hadoop包含yarn-site.xml的模板。首先，需要使用以下命令将文件从mapred-site，xml.template复制到mapred-site.xml文件。

$ cp mapred-site.xml.template mapred-site.xml 
打开mapred-site.xml文件，并在此文件中的<configuration>，</ configuration>标记之间添加以下属性。

<configuration>
 
   <property> 
      <name>mapreduce.framework.name</name>
      <value>yarn</value>
   </property>
   
</configuration>
验证Hadoop安装
以下步骤用于验证Hadoop安装。

第1步：名称节点设置
使用命令“HDFS的NameNode -format”如下设置名称节点。

$ cd ~ 
$ hdfs namenode -format 
预期结果如下。

10/24/14 21:30:55 INFO namenode.NameNode: STARTUP_MSG: 
/************************************************************ 
STARTUP_MSG: Starting NameNode 
STARTUP_MSG:   host = localhost/192.168.1.11 
STARTUP_MSG:   args = [-format] 
STARTUP_MSG:   version = 2.4.1 
...
...
10/24/14 21:30:56 INFO common.Storage: Storage directory 
/home/hadoop/hadoopinfra/hdfs/namenode has been successfully formatted. 
10/24/14 21:30:56 INFO namenode.NNStorageRetentionManager: Going to 
retain 1 images with txid >= 0 
10/24/14 21:30:56 INFO util.ExitUtil: Exiting with status 0 
10/24/14 21:30:56 INFO namenode.NameNode: SHUTDOWN_MSG: 
/************************************************************ 
SHUTDOWN_MSG: Shutting down NameNode at localhost/192.168.1.11 
************************************************************/
第2步：验证HadoopDFS
以下命令用于启动dfs。执行此命令将启动您的Hadoop文件系统。

$ start-dfs.sh 
预期输出如下：

10/24/14 21:37:56 
Starting namenodes on [localhost] 
localhost: starting namenode, logging to /home/hadoop/hadoop
2.4.1/logs/hadoop-hadoop-namenode-localhost.out 
localhost: starting datanode, logging to /home/hadoop/hadoop
2.4.1/logs/hadoop-hadoop-datanode-localhost.out 
Starting secondary namenodes [0.0.0.0]
第3步：验证Yarn脚本
下面的命令被用于启动Yarn脚本。执行该命令将启动纱守护进程。

$ start-yarn.sh 
预期输出如下：

starting yarn daemons 
starting resourcemanager, logging to /home/hadoop/hadoop
2.4.1/logs/yarn-hadoop-resourcemanager-localhost.out 
localhost: starting nodemanager, logging to /home/hadoop/hadoop
2.4.1/logs/yarn-hadoop-nodemanager-localhost.out 
第4步：在浏览器上访问Hadoop
访问Hadoop的默认端口号为50070.使用以下URL在浏览器上获取Hadoop服务。

http://localhost:50070/
在浏览器访问的Hadoop
第5步：验证集群的所有应用程序
访问群集的所有应用程序的默认端口号为8088.使用以下URL访问此服务。

http://localhost:8088/
Hadoop的应用集群













Hadoop 多节点集群
由 johnnyhung 创建，youj 最后一次修改 2017-01-07 14:51:32
本章介绍了分布式环境中Hadoop多节点集群的设置。

由于整个集群无法演示，我们将使用三个系统（一个主节点和两个从节点）解释Hadoop集群环境;下面给出他们的IP地址。

Hadoop Master：192.168.1.15（hadoop-master）
Hadoop Slave：192.168.1.16（hadoop-slave-1）
Hadoop Slave：192.168.1.17（hadoop-slave-2）
按照以下步骤进行Hadoop多节点群集设置。

安装Java
Java是Hadoop的主要先决条件。首先，您应该使用“java -version”验证系统中是否存在java。 java版本命令的语法如下。

$ java -version
如果一切正常，它会给你以下输出。

java version "1.7.0_71" 
Java(TM) SE Runtime Environment (build 1.7.0_71-b13) 
Java HotSpot(TM) Client VM (build 25.0-b02, mixed mode)
如果系统中没有安装java，请按照给定的步骤安装java。

步骤1
通过访问以下链接下载java（JDK - X64.tar.gz）http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html

然后 jdk-7u71-linux-x64.tar.gz 将下载到您的系统。

第2步
通常你会在下载文件夹中找到下载的java文件。使用以下命令验证它并解压缩jdk-7u71-linux-x64.gz文件。

$ cd Downloads/
$ ls
jdk-7u71-Linux-x64.gz
$ tar zxf jdk-7u71-Linux-x64.gz
$ ls
jdk1.7.0_71 jdk-7u71-Linux-x64.gz
第3步
要使java可用于所有用户，您必须将其移动到位置“/ usr / local /”。打开根目录，然后键入以下命令。

$ su
password:
# mv jdk1.7.0_71 /usr/local/
# exit
第4步
要设置PATH和JAVA_HOME变量，请将以下命令添加到〜/.bashrc文件。

export JAVA_HOME=/usr/local/jdk1.7.0_71
export PATH=PATH:$JAVA_HOME/bin
现在如上所述从终端验证java -version命令。按照上述过程并在所有集群节点中安装java。

创建用户帐户
在主系统和从系统上创建系统用户帐户以使用Hadoop安装。

# useradd hadoop 
# passwd hadoop
映射节点
您必须在所有节点上的/ etc / folder中编辑hosts文件，指定每个系统的IP地址，后跟其主机名。

# vi /etc/hosts
enter the following lines in the /etc/hosts file.
192.168.1.109 hadoop-master 
192.168.1.145 hadoop-slave-1 
192.168.56.1 hadoop-slave-2
配置基于Key的登录
在每个节点中设置ssh，以便它们可以彼此通信，而不需要提示输入密码。

# su hadoop 
$ ssh-keygen -t rsa 
$ ssh-copy-id -i ~/.ssh/id_rsa.pub tutorialspoint@hadoop-master 
$ ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop_tp1@hadoop-slave-1 
$ ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop_tp2@hadoop-slave-2 
$ chmod 0600 ~/.ssh/authorized_keys 
$ exit
Hadoop安装
在主服务器中，使用以下命令下载并安装Hadoop。

# mkdir /opt/hadoop 
# cd /opt/hadoop/ 
# wget http://apache.mesi.com.ar/hadoop/common/hadoop-1.2.1/hadoop-1.2.0.tar.gz 
# tar -xzf hadoop-1.2.0.tar.gz 
# mv hadoop-1.2.0 hadoop
# chown -R hadoop /opt/hadoop 
# cd /opt/hadoop/hadoop/
Hadoop配置
您必须通过进行以下更改来配置Hadoop服务器。

core-site.xml
打开core-site.xml文件并进行编辑，如下所示。

<configuration>
   <property> 
      <name>fs.default.name</name> 
      <value>hdfs://hadoop-master:9000/</value> 
   </property> 
   <property> 
      <name>dfs.permissions</name> 
      <value>false</value> 
   </property> 
</configuration>
hdfs-site.xml
打开hdfs-site.xml文件并进行编辑，如下所示。

<configuration>
   <property> 
      <name>dfs.data.dir</name> 
      <value>/opt/hadoop/hadoop/dfs/name/data</value> 
      <final>true</final> 
   </property> 

   <property> 
      <name>dfs.name.dir</name> 
      <value>/opt/hadoop/hadoop/dfs/name</value> 
      <final>true</final> 
   </property> 

   <property> 
      <name>dfs.replication</name> 
      <value>1</value> 
   </property> 
</configuration>
mapred-site.xml中
打开mapred-site.xml文件并进行编辑，如下所示。

<configuration>
   <property> 
      <name>mapred.job.tracker</name> 
      <value>hadoop-master:9001</value> 
   </property> 
</configuration>
hadoop-env.sh
打开hadoop-env.sh文件并编辑JAVA_HOME，HADOOP_CONF_DIR和HADOOP_OPTS，如下所示。

注意：根据系统配置设置JAVA_HOME。

export JAVA_HOME=/opt/jdk1.7.0_17 export HADOOP_OPTS=-Djava.net.preferIPv4Stack=true export HADOOP_CONF_DIR=/opt/hadoop/hadoop/conf
在从属服务器 Slave上安装Hadoop
按照给定的命令在所有从属服务器 Slave上安装Hadoop。

# su hadoop 
$ cd /opt/hadoop 
$ scp -r hadoop hadoop-slave-1:/opt/hadoop 
$ scp -r hadoop hadoop-slave-2:/opt/hadoop
在主服务器上配置Hadoop
打开主服务器并按照给定的命令配置它。

# su hadoop 
$ cd /opt/hadoop/hadoop
配置主节点
$ vi etc/hadoop/masters
hadoop-master
配置从节点
$ vi etc/hadoop/slaves
hadoop-slave-1 
hadoop-slave-2
格式命名Hadoop Master上的节点
# su hadoop 
$ cd /opt/hadoop/hadoop 
$ bin/hadoop namenode –format
11/10/14 10:58:07 INFO namenode.NameNode: STARTUP_MSG: /************************************************************ 
STARTUP_MSG: Starting NameNode 
STARTUP_MSG: host = hadoop-master/192.168.1.109 
STARTUP_MSG: args = [-format] 
STARTUP_MSG: version = 1.2.0 
STARTUP_MSG: build = https://svn.apache.org/repos/asf/hadoop/common/branches/branch-1.2 -r 1479473; compiled by 'hortonfo' on Mon May 6 06:59:37 UTC 2013 
STARTUP_MSG: java = 1.7.0_71 ************************************************************/ 11/10/14 10:58:08 INFO util.GSet: Computing capacity for map BlocksMap editlog=/opt/hadoop/hadoop/dfs/name/current/edits
………………………………………………….
………………………………………………….
…………………………………………………. 11/10/14 10:58:08 INFO common.Storage: Storage directory /opt/hadoop/hadoop/dfs/name has been successfully formatted. 11/10/14 10:58:08 INFO namenode.NameNode: 
SHUTDOWN_MSG: /************************************************************ SHUTDOWN_MSG: Shutting down NameNode at hadoop-master/192.168.1.15 ************************************************************/
启动Hadoop服务
以下命令用于启动Hadoop-Master上的所有Hadoop服务。

$ cd $HADOOP_HOME/sbin
$ start-all.sh
在Hadoop集群中添加新的DataNode
下面给出了将新节点添加到Hadoop集群时需要遵循的步骤。

网络配置
通过一些适当的网络配置向现有Hadoop集群添加新节点。假设以下网络配置。

对于新节点配置：

IP address : 192.168.1.103 
netmask : 255.255.255.0
hostname : slave3.in
添加用户和SSH访问
添加用户
在新节点上，通过使用以下命令将“hadoop”用户和Hadoop用户的密码添加到“hadoop123”或任何您想要的密码。

useradd hadoop
passwd hadoop
设置从主机到新从属机的密码关联性低。

在主站上执行以下操作
mkdir -p $HOME/.ssh 
chmod 700 $HOME/.ssh 
ssh-keygen -t rsa -P '' -f $HOME/.ssh/id_rsa 
cat $HOME/.ssh/id_rsa.pub >> $HOME/.ssh/authorized_keys 
chmod 644 $HOME/.ssh/authorized_keys
Copy the public key to new slave node in hadoop user $HOME directory
scp $HOME/.ssh/id_rsa.pub hadoop@192.168.1.103:/home/hadoop/
在从站上执行以下操作
登录到hadoop。如果没有，登录到hadoop用户。

su hadoop ssh -X hadoop@192.168.1.103
将公共密钥的内容复制到文件“$ HOME / .ssh / authorized_keys”中，然后通过执行以下命令更改其权限。

cd $HOME
mkdir -p $HOME/.ssh 
chmod 700 $HOME/.ssh
cat id_rsa.pub >>$HOME/.ssh/authorized_keys 
chmod 644 $HOME/.ssh/authorized_keys
检查主机的ssh登录。现在检查是否可以ssh到新节点没有主密码。

ssh hadoop@192.168.1.103 or hadoop@slave3
设置新节点的主机名
您可以在文件/etc /sysconfig /network中设置主机名

On new slave3 machine
NETWORKING=yes 
HOSTNAME=slave3.in
要使更改生效，请重新启动计算机或运行hostname命令到具有相应主机名的新计算机（重新启动是一个好的选项）。

在slave3节点机器上：

主机名 slave3.in

使用以下行在集群的所有计算机上更新/etc/hosts：

192.168.1.102 slave3.in slave3
现在尝试用主机名ping机器，以检查它是否正在解析到IP。

在新节点机器上：

ping master.in
在新节点上启动DataNode
使用$HADOOP_HOME / bin / hadoop-daemon.sh script手动启动datanode守护程序。它将自动联系主节点（NameNode）并加入集群。我们还应该将新节点添加到主服务器中的conf / slaves文件。基于脚本的命令将识别新节点。

登录新节点
su hadoop or ssh -X hadoop@192.168.1.103
使用以下命令在新添加的从属节点上启动HDFS
./bin/hadoop-daemon.sh start datanode
在新节点上检查jps命令的输出。它看起来如下。
$ jps
7141 DataNode
10312 Jps
从Hadoop集群中删除DataNode
我们可以在运行时从群集中删除节点，而不会有任何数据丢失。 HDFS提供了一个停用功能，确保安全地执行删除节点。要使用它，请按照下面的步骤：

第1步：登录master
登录到安装了Hadoop的主机用户。

$ su hadoop
第2步：更改集群配置
必须在启动集群之前配置排除文件。将名为dfs.hosts.exclude的键添加到我们的$HADOOP_HOME/etc/hadoop/hdfs-site.xml文件中。与此键相关的值提供了NameNode本地文件系统上文件的完整路径，该文件包含不允许连接到HDFS的计算机列表。

例如，将这些行添加到etc/hadoop/hdfs-site.xml文件。

<property> 
   <name>dfs.hosts.exclude</name> 
   <value>/home/hadoop/hadoop-1.2.1/hdfs_exclude.txt</value> 
   <description>DFS exclude</description> 
</property>
第3步：确定要停用的主机
要停用的每台计算机都应添加到由hdfs_exclude.txt标识的文件中，每行一个域名。这将阻止他们连接到NameNode。如果要删除DataNode2，“/home/hadoop/hadoop-1.2.1/hdfs_exclude.txt”文件的内容如下所示。

slave2.in
第4步：步骤4：强制配置重新加载
运行命令“$ HADOOP_HOME/bin/hadoop dfsadmin -refreshNodes”，不带引号。

$ $HADOOP_HOME/bin/hadoop dfsadmin -refreshNodes
这将强制NameNode重新读取其配置，包括新更新的“excludes”文件。它将在一段时间内停止节点，从而允许将每个节点的块的时间复制到被调度为保持活动的机器上。

在slave2.in上，检查jps命令输出。一段时间后，您将看到DataNode进程被自动关闭。

第5步：关闭节点
在停用过程完成后，停用的硬件可以安全关闭进行维护。运行report命令dfsadmin以检查停用的状态。以下命令将描述退役节点和连接到集群的节点的状态。

$ $HADOOP_HOME/bin/hadoop dfsadmin -report
第6步：编辑再次排除文件
一旦计算机已停用，它们可以从“excludees”文件中删除。再次运行“$ HADOOP_HOME / bin / hadoop dfsadmin -refreshNodes”会将excludees文件读回NameNode;允许DataNodes在维护完成后重新加入群集，或者在群集中再次需要额外的容量等。

特别注意：如果遵循上述过程，并且tasktracker进程仍在节点上运行，则需要关闭它。一种方法是断开机器，就像我们在上面的步骤。

tasktracker可以在任何时间点通过以下命令即时运行/关闭。Master将自动识别过程，并宣布为死亡。没有必要遵循相同的过程来删除tasktracker，因为它与DataNode相比并不重要。DataNode包含要安全删除的数据，而不会有任何数据丢失。

tasktracker可以在任何时间点通过以下命令即时运行/关闭。

$ $HADOOP_HOME/bin/hadoop-daemon.sh stop tasktracker $HADOOP_HOME/bin/hadoop-daemon.sh start tasktracker